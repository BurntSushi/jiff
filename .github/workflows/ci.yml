name: ci
on:
  pull_request:
  push:
    branches:
    - master
  schedule:
  - cron: '00 01 * * *'

# The section is needed to drop write-all permissions that are granted on
# `schedule` event. By specifying any permission explicitly all others are set
# to none. By using the principle of least privilege the damage a compromised
# workflow can do (because of an injection or compromised third party tool or
# action) is restricted. Currently the worklow doesn't need any additional
# permission except for pulling the code. Adding labels to issues, commenting
# on pull-requests, etc. may need additional permissions:
#
# Syntax for this section:
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
#
# Reference for how to assign permissions on a job-by-job basis:
# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
#
# Reference for available permissions that we can enable if needed:
# https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  # to fetch code (actions/checkout)
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - build: stable
          os: ubuntu-latest
          rust: stable
        - build: beta
          os: ubuntu-latest
          rust: beta
        - build: nightly
          os: ubuntu-latest
          rust: nightly
        - build: macos
          os: macos-latest
          rust: stable
        - build: win-msvc
          os: windows-latest
          rust: stable
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    - run: cargo build --verbose
    - run: cargo doc --verbose
    - run: cargo test --verbose --all
    - run: cargo test --verbose -p jiff-cli
    # Skip on Windows because it takes freaking forever.
    - if: matrix.build != 'win-msvc'
      run: cargo test --verbose --lib --profile testrelease
    - if: matrix.build != 'win-msvc'
      run: cargo test --verbose --test integration --profile testrelease
    - if: matrix.build != 'win-msvc'
      run: ./test

  # Tests for stable-x86_64-gnu. It's different enough from the "main" targets
  # to warrant its own section. The main problem is that it is just
  # annoyingly slow. Like, twice as slow as the next slowest runner. So we
  # run a stripped down version of tests.
  win-gnu:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable-x86_64-gnu
    - run: cargo build --verbose
    - run: cargo doc --verbose
    - run: cargo test --verbose --lib
    - run: cargo test --verbose --test integration

  # This job runs a stripped down version of CI to test the MSRV. The specific
  # reason for doing this is that Jiff dev-dependencies tend to evolve more
  # quickly. Or if I want to use newer features in doc examples. There isn't as
  # tight of a control on them because, well, they're only used in tests and
  # their MSRV doesn't matter as much.
  msrv:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.70.0
    # We would use `cargo build --all` here, but `jiff-cli` doesn't really
    # track an MSRV and I don't want it to.
    - name: Build jiff
      run: cargo build -p jiff --verbose
    - name: Build jiff-tzdb
      run: cargo build -p jiff-tzdb --verbose
    - name: Build jiff-tzdb-platform
      run: cargo build -p jiff-tzdb-platform --verbose
    - name: Build docs
      run: cargo doc --verbose
    - name: Run library tests
      run: cargo test --lib
    - name: Run integration tests
      run: cargo test --test integration

  # Generic testing for most cross targets. Some get special treatment in
  # other jobs.
  cross:
    env:
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
        - i686-unknown-linux-gnu
        - aarch64-unknown-linux-gnu
        - powerpc-unknown-linux-gnu
        - powerpc64-unknown-linux-gnu
        - s390x-unknown-linux-gnu
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install and configure Cross
      run: |
        # In the past, new releases of 'cross' have broken CI. So for now, we
        # pin it. We also use their pre-compiled binary releases because cross
        # has over 100 dependencies and takes a bit to compile.
        dir="$RUNNER_TEMP/cross-download"
        mkdir "$dir"
        echo "$dir" >> $GITHUB_PATH
        cd "$dir"
        curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
        tar xf cross-x86_64-unknown-linux-musl.tar.gz
    - run: cross build --verbose --target ${{ matrix.target }}
    - run: cross test --verbose --target ${{ matrix.target }} --all
    - run: cross test --verbose --target ${{ matrix.target }} -p jiff-cli

  # Test the wasm32-wasip1 target via wasmtime.
  wasm32-wasip1:
    runs-on: ubuntu-latest
    env:
      # The version of wasmtime to download and install.
      WASMTIME_VERSION: 22.0.0
      # Yes'um.
      WASMTIME_BACKTRACE_DETAILS: 1
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Add wasm32-wasip1 target
      run: rustup target add wasm32-wasip1
    - name: Download and install Wasmtime
      run: |
        echo "CARGO_BUILD_TARGET=wasm32-wasip1" >> $GITHUB_ENV
        curl -LO https://github.com/bytecodealliance/wasmtime/releases/download/v$WASMTIME_VERSION/wasmtime-v$WASMTIME_VERSION-x86_64-linux.tar.xz
        tar xvf wasmtime-v$WASMTIME_VERSION-x86_64-linux.tar.xz
        echo `pwd`/wasmtime-v$WASMTIME_VERSION-x86_64-linux >> $GITHUB_PATH
        echo "CARGO_TARGET_WASM32_WASIP1_RUNNER=wasmtime run --dir / --env INSTA_WORKSPACE_ROOT=$PWD --" >> $GITHUB_ENV
    - name: Build jiff
      run: cargo build -p jiff --verbose
    - name: Build jiff-tzdb
      run: cargo build -p jiff-tzdb --verbose
    - name: Build jiff-tzdb-platform
      run: cargo build -p jiff-tzdb-platform --verbose
    - name: Run library tests
      run: cargo test --lib -- --nocapture
    - name: Run integration tests
      run: cargo test --test integration -- --nocapture

  # Test the wasm32-unknown-emscripten target.
  #
  # Regretably, `insta` doesn't work on emscripten, so we just do a basic
  # sanity check here.
  wasm32-unknown-emscripten:
    runs-on: ubuntu-latest
    env:
      # Bump this as appropriate. We pin to a version to make sure CI
      # continues to work as cross releases in the past have broken things
      # in subtle ways.
      CROSS_VERSION: v0.2.5
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Install and configure Cross
      run: |
        dir="$RUNNER_TEMP/cross-download"
        mkdir "$dir"
        echo "$dir" >> $GITHUB_PATH
        cd "$dir"
        curl -LO "https://github.com/cross-rs/cross/releases/download/$CROSS_VERSION/cross-x86_64-unknown-linux-musl.tar.gz"
        tar xf cross-x86_64-unknown-linux-musl.tar.gz
    - name: Build jiff
      run: cross build --verbose --target wasm32-unknown-emscripten -p jiff
    - name: Build jiff-tzdb
      run: cargo build --verbose --target wasm32-unknown-emscripten -p jiff-tzdb
    - name: Build jiff-tzdb-platform
      run: cargo build --verbose --target wasm32-unknown-emscripten -p jiff-tzdb-platform
    - name: Run library tests
      run: cross test --verbose --target wasm32-unknown-emscripten --features logging --lib now_works -- --nocapture

  # Tests wasm32-unknown-unknown integration via wasm-pack.
  wasm32-unknown-uknown:
    runs-on: ubuntu-latest
    env:
      # Set the time zone to something so that there's some kind of interesting
      # output to scrutinize. The test below doesn't actually assert anything
      # about the time zone, but we can at least visually inspect it in the CI
      # logs.
      TZ: America/New_York
    steps:
    - uses: dtolnay/rust-toolchain@stable
    - uses: actions/checkout@v4
    - name: Install wasm-pack
      run: |
        curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    - name: Test wasm-pack project
      run: |
        cd jiff-wasm
        wasm-pack test --node

  # Run benchmarks as tests.
  testbench:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    - name: Run benchmark tests
      run: |
        cargo bench --manifest-path bench/Cargo.toml -- --test

  # Check that all files are formatted properly.
  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt --all -- --check
